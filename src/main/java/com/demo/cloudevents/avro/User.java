/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.cloudevents.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4053571744068440478L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.demo.cloudevents.avro\",\"fields\":[{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"customerId\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"ccId\",\"type\":\"string\"}]}},{\"name\":\"account\",\"type\":{\"type\":\"record\",\"name\":\"Account\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"},{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"paymentId\",\"type\":\"string\"},{\"name\":\"paymentAmount\",\"type\":\"double\"}]}}]}},{\"name\":\"paymentSchedule\",\"type\":{\"type\":\"record\",\"name\":\"PaymentSchedule\",\"fields\":[{\"name\":\"paymentScheduleType\",\"type\":\"string\"},{\"name\":\"paymentFrequency\",\"type\":\"string\"},{\"name\":\"autoPay\",\"type\":{\"type\":\"record\",\"name\":\"Autopay\",\"fields\":[{\"name\":\"autoPayStartDate\",\"type\":\"string\"},{\"name\":\"autoPayDate\",\"type\":\"string\"}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this User to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a User from a ByteBuffer. */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.demo.cloudevents.avro.Customer customer;
  @Deprecated public com.demo.cloudevents.avro.Account account;
  @Deprecated public com.demo.cloudevents.avro.PaymentSchedule paymentSchedule;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param customer The new value for customer
   * @param account The new value for account
   * @param paymentSchedule The new value for paymentSchedule
   */
  public User(com.demo.cloudevents.avro.Customer customer, com.demo.cloudevents.avro.Account account, com.demo.cloudevents.avro.PaymentSchedule paymentSchedule) {
    this.customer = customer;
    this.account = account;
    this.paymentSchedule = paymentSchedule;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer;
    case 1: return account;
    case 2: return paymentSchedule;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer = (com.demo.cloudevents.avro.Customer)value$; break;
    case 1: account = (com.demo.cloudevents.avro.Account)value$; break;
    case 2: paymentSchedule = (com.demo.cloudevents.avro.PaymentSchedule)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public com.demo.cloudevents.avro.Customer getCustomer() {
    return customer;
  }

  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(com.demo.cloudevents.avro.Customer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public com.demo.cloudevents.avro.Account getAccount() {
    return account;
  }

  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(com.demo.cloudevents.avro.Account value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'paymentSchedule' field.
   * @return The value of the 'paymentSchedule' field.
   */
  public com.demo.cloudevents.avro.PaymentSchedule getPaymentSchedule() {
    return paymentSchedule;
  }

  /**
   * Sets the value of the 'paymentSchedule' field.
   * @param value the value to set.
   */
  public void setPaymentSchedule(com.demo.cloudevents.avro.PaymentSchedule value) {
    this.paymentSchedule = value;
  }

  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.demo.cloudevents.avro.User.Builder newBuilder() {
    return new com.demo.cloudevents.avro.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.demo.cloudevents.avro.User.Builder newBuilder(com.demo.cloudevents.avro.User.Builder other) {
    return new com.demo.cloudevents.avro.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.demo.cloudevents.avro.User.Builder newBuilder(com.demo.cloudevents.avro.User other) {
    return new com.demo.cloudevents.avro.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private com.demo.cloudevents.avro.Customer customer;
    private com.demo.cloudevents.avro.Customer.Builder customerBuilder;
    private com.demo.cloudevents.avro.Account account;
    private com.demo.cloudevents.avro.Account.Builder accountBuilder;
    private com.demo.cloudevents.avro.PaymentSchedule paymentSchedule;
    private com.demo.cloudevents.avro.PaymentSchedule.Builder paymentScheduleBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.demo.cloudevents.avro.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer)) {
        this.customer = data().deepCopy(fields()[0].schema(), other.customer);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = com.demo.cloudevents.avro.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAccountBuilder()) {
        this.accountBuilder = com.demo.cloudevents.avro.Account.newBuilder(other.getAccountBuilder());
      }
      if (isValidValue(fields()[2], other.paymentSchedule)) {
        this.paymentSchedule = data().deepCopy(fields()[2].schema(), other.paymentSchedule);
        fieldSetFlags()[2] = true;
      }
      if (other.hasPaymentScheduleBuilder()) {
        this.paymentScheduleBuilder = com.demo.cloudevents.avro.PaymentSchedule.newBuilder(other.getPaymentScheduleBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.demo.cloudevents.avro.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customer)) {
        this.customer = data().deepCopy(fields()[0].schema(), other.customer);
        fieldSetFlags()[0] = true;
      }
      this.customerBuilder = null;
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = true;
      }
      this.accountBuilder = null;
      if (isValidValue(fields()[2], other.paymentSchedule)) {
        this.paymentSchedule = data().deepCopy(fields()[2].schema(), other.paymentSchedule);
        fieldSetFlags()[2] = true;
      }
      this.paymentScheduleBuilder = null;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public com.demo.cloudevents.avro.Customer getCustomer() {
      return customer;
    }

    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder setCustomer(com.demo.cloudevents.avro.Customer value) {
      validate(fields()[0], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.Customer.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(com.demo.cloudevents.avro.Customer.newBuilder(customer));
        } else {
          setCustomerBuilder(com.demo.cloudevents.avro.Customer.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.User.Builder setCustomerBuilder(com.demo.cloudevents.avro.Customer.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public com.demo.cloudevents.avro.Account getAccount() {
      return account;
    }

    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder setAccount(com.demo.cloudevents.avro.Account value) {
      validate(fields()[1], value);
      this.accountBuilder = null;
      this.account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'account' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.Account.Builder getAccountBuilder() {
      if (accountBuilder == null) {
        if (hasAccount()) {
          setAccountBuilder(com.demo.cloudevents.avro.Account.newBuilder(account));
        } else {
          setAccountBuilder(com.demo.cloudevents.avro.Account.newBuilder());
        }
      }
      return accountBuilder;
    }

    /**
     * Sets the Builder instance for the 'account' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.User.Builder setAccountBuilder(com.demo.cloudevents.avro.Account.Builder value) {
      clearAccount();
      accountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'account' field has an active Builder instance
     * @return True if the 'account' field has an active Builder instance
     */
    public boolean hasAccountBuilder() {
      return accountBuilder != null;
    }

    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder clearAccount() {
      account = null;
      accountBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentSchedule' field.
      * @return The value.
      */
    public com.demo.cloudevents.avro.PaymentSchedule getPaymentSchedule() {
      return paymentSchedule;
    }

    /**
      * Sets the value of the 'paymentSchedule' field.
      * @param value The value of 'paymentSchedule'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder setPaymentSchedule(com.demo.cloudevents.avro.PaymentSchedule value) {
      validate(fields()[2], value);
      this.paymentScheduleBuilder = null;
      this.paymentSchedule = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentSchedule' field has been set.
      * @return True if the 'paymentSchedule' field has been set, false otherwise.
      */
    public boolean hasPaymentSchedule() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'paymentSchedule' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder getPaymentScheduleBuilder() {
      if (paymentScheduleBuilder == null) {
        if (hasPaymentSchedule()) {
          setPaymentScheduleBuilder(com.demo.cloudevents.avro.PaymentSchedule.newBuilder(paymentSchedule));
        } else {
          setPaymentScheduleBuilder(com.demo.cloudevents.avro.PaymentSchedule.newBuilder());
        }
      }
      return paymentScheduleBuilder;
    }

    /**
     * Sets the Builder instance for the 'paymentSchedule' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.User.Builder setPaymentScheduleBuilder(com.demo.cloudevents.avro.PaymentSchedule.Builder value) {
      clearPaymentSchedule();
      paymentScheduleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'paymentSchedule' field has an active Builder instance
     * @return True if the 'paymentSchedule' field has an active Builder instance
     */
    public boolean hasPaymentScheduleBuilder() {
      return paymentScheduleBuilder != null;
    }

    /**
      * Clears the value of the 'paymentSchedule' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.User.Builder clearPaymentSchedule() {
      paymentSchedule = null;
      paymentScheduleBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        if (customerBuilder != null) {
          record.customer = this.customerBuilder.build();
        } else {
          record.customer = fieldSetFlags()[0] ? this.customer : (com.demo.cloudevents.avro.Customer) defaultValue(fields()[0]);
        }
        if (accountBuilder != null) {
          record.account = this.accountBuilder.build();
        } else {
          record.account = fieldSetFlags()[1] ? this.account : (com.demo.cloudevents.avro.Account) defaultValue(fields()[1]);
        }
        if (paymentScheduleBuilder != null) {
          record.paymentSchedule = this.paymentScheduleBuilder.build();
        } else {
          record.paymentSchedule = fieldSetFlags()[2] ? this.paymentSchedule : (com.demo.cloudevents.avro.PaymentSchedule) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
