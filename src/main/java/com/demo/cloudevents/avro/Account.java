/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.cloudevents.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Account extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4016073163276819160L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Account\",\"namespace\":\"com.demo.cloudevents.avro\",\"fields\":[{\"name\":\"accountNumber\",\"type\":\"string\"},{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"paymentId\",\"type\":\"string\"},{\"name\":\"paymentAmount\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Account> ENCODER =
      new BinaryMessageEncoder<Account>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Account> DECODER =
      new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Account> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Account> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Account>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Account to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Account from a ByteBuffer. */
  public static Account fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence accountNumber;
  @Deprecated public com.demo.cloudevents.avro.Payment payment;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Account() {}

  /**
   * All-args constructor.
   * @param accountNumber The new value for accountNumber
   * @param payment The new value for payment
   */
  public Account(java.lang.CharSequence accountNumber, com.demo.cloudevents.avro.Payment payment) {
    this.accountNumber = accountNumber;
    this.payment = payment;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accountNumber;
    case 1: return payment;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accountNumber = (java.lang.CharSequence)value$; break;
    case 1: payment = (com.demo.cloudevents.avro.Payment)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.CharSequence getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.CharSequence value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public com.demo.cloudevents.avro.Payment getPayment() {
    return payment;
  }

  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(com.demo.cloudevents.avro.Payment value) {
    this.payment = value;
  }

  /**
   * Creates a new Account RecordBuilder.
   * @return A new Account RecordBuilder
   */
  public static com.demo.cloudevents.avro.Account.Builder newBuilder() {
    return new com.demo.cloudevents.avro.Account.Builder();
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Account RecordBuilder
   */
  public static com.demo.cloudevents.avro.Account.Builder newBuilder(com.demo.cloudevents.avro.Account.Builder other) {
    return new com.demo.cloudevents.avro.Account.Builder(other);
  }

  /**
   * Creates a new Account RecordBuilder by copying an existing Account instance.
   * @param other The existing instance to copy.
   * @return A new Account RecordBuilder
   */
  public static com.demo.cloudevents.avro.Account.Builder newBuilder(com.demo.cloudevents.avro.Account other) {
    return new com.demo.cloudevents.avro.Account.Builder(other);
  }

  /**
   * RecordBuilder for Account instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Account>
    implements org.apache.avro.data.RecordBuilder<Account> {

    private java.lang.CharSequence accountNumber;
    private com.demo.cloudevents.avro.Payment payment;
    private com.demo.cloudevents.avro.Payment.Builder paymentBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.demo.cloudevents.avro.Account.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[0].schema(), other.accountNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payment)) {
        this.payment = data().deepCopy(fields()[1].schema(), other.payment);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = com.demo.cloudevents.avro.Payment.newBuilder(other.getPaymentBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Account instance
     * @param other The existing instance to copy.
     */
    private Builder(com.demo.cloudevents.avro.Account other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[0].schema(), other.accountNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payment)) {
        this.payment = data().deepCopy(fields()[1].schema(), other.payment);
        fieldSetFlags()[1] = true;
      }
      this.paymentBuilder = null;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountNumber() {
      return accountNumber;
    }

    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.Account.Builder setAccountNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.accountNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.Account.Builder clearAccountNumber() {
      accountNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public com.demo.cloudevents.avro.Payment getPayment() {
      return payment;
    }

    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.Account.Builder setPayment(com.demo.cloudevents.avro.Payment value) {
      validate(fields()[1], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(com.demo.cloudevents.avro.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(com.demo.cloudevents.avro.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.Account.Builder setPaymentBuilder(com.demo.cloudevents.avro.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.Account.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Account build() {
      try {
        Account record = new Account();
        record.accountNumber = fieldSetFlags()[0] ? this.accountNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (paymentBuilder != null) {
          record.payment = this.paymentBuilder.build();
        } else {
          record.payment = fieldSetFlags()[1] ? this.payment : (com.demo.cloudevents.avro.Payment) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Account>
    WRITER$ = (org.apache.avro.io.DatumWriter<Account>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Account>
    READER$ = (org.apache.avro.io.DatumReader<Account>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
