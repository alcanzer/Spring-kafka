/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.demo.cloudevents.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class PaymentSchedule extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3839069215044361775L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentSchedule\",\"namespace\":\"com.demo.cloudevents.avro\",\"fields\":[{\"name\":\"paymentScheduleType\",\"type\":\"string\"},{\"name\":\"paymentFrequency\",\"type\":\"string\"},{\"name\":\"autoPay\",\"type\":{\"type\":\"record\",\"name\":\"Autopay\",\"fields\":[{\"name\":\"autoPayStartDate\",\"type\":\"string\"},{\"name\":\"autoPayDate\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentSchedule> ENCODER =
      new BinaryMessageEncoder<PaymentSchedule>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentSchedule> DECODER =
      new BinaryMessageDecoder<PaymentSchedule>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<PaymentSchedule> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<PaymentSchedule> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentSchedule>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this PaymentSchedule to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a PaymentSchedule from a ByteBuffer. */
  public static PaymentSchedule fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence paymentScheduleType;
  @Deprecated public java.lang.CharSequence paymentFrequency;
  @Deprecated public com.demo.cloudevents.avro.Autopay autoPay;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentSchedule() {}

  /**
   * All-args constructor.
   * @param paymentScheduleType The new value for paymentScheduleType
   * @param paymentFrequency The new value for paymentFrequency
   * @param autoPay The new value for autoPay
   */
  public PaymentSchedule(java.lang.CharSequence paymentScheduleType, java.lang.CharSequence paymentFrequency, com.demo.cloudevents.avro.Autopay autoPay) {
    this.paymentScheduleType = paymentScheduleType;
    this.paymentFrequency = paymentFrequency;
    this.autoPay = autoPay;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentScheduleType;
    case 1: return paymentFrequency;
    case 2: return autoPay;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentScheduleType = (java.lang.CharSequence)value$; break;
    case 1: paymentFrequency = (java.lang.CharSequence)value$; break;
    case 2: autoPay = (com.demo.cloudevents.avro.Autopay)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'paymentScheduleType' field.
   * @return The value of the 'paymentScheduleType' field.
   */
  public java.lang.CharSequence getPaymentScheduleType() {
    return paymentScheduleType;
  }

  /**
   * Sets the value of the 'paymentScheduleType' field.
   * @param value the value to set.
   */
  public void setPaymentScheduleType(java.lang.CharSequence value) {
    this.paymentScheduleType = value;
  }

  /**
   * Gets the value of the 'paymentFrequency' field.
   * @return The value of the 'paymentFrequency' field.
   */
  public java.lang.CharSequence getPaymentFrequency() {
    return paymentFrequency;
  }

  /**
   * Sets the value of the 'paymentFrequency' field.
   * @param value the value to set.
   */
  public void setPaymentFrequency(java.lang.CharSequence value) {
    this.paymentFrequency = value;
  }

  /**
   * Gets the value of the 'autoPay' field.
   * @return The value of the 'autoPay' field.
   */
  public com.demo.cloudevents.avro.Autopay getAutoPay() {
    return autoPay;
  }

  /**
   * Sets the value of the 'autoPay' field.
   * @param value the value to set.
   */
  public void setAutoPay(com.demo.cloudevents.avro.Autopay value) {
    this.autoPay = value;
  }

  /**
   * Creates a new PaymentSchedule RecordBuilder.
   * @return A new PaymentSchedule RecordBuilder
   */
  public static com.demo.cloudevents.avro.PaymentSchedule.Builder newBuilder() {
    return new com.demo.cloudevents.avro.PaymentSchedule.Builder();
  }

  /**
   * Creates a new PaymentSchedule RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentSchedule RecordBuilder
   */
  public static com.demo.cloudevents.avro.PaymentSchedule.Builder newBuilder(com.demo.cloudevents.avro.PaymentSchedule.Builder other) {
    return new com.demo.cloudevents.avro.PaymentSchedule.Builder(other);
  }

  /**
   * Creates a new PaymentSchedule RecordBuilder by copying an existing PaymentSchedule instance.
   * @param other The existing instance to copy.
   * @return A new PaymentSchedule RecordBuilder
   */
  public static com.demo.cloudevents.avro.PaymentSchedule.Builder newBuilder(com.demo.cloudevents.avro.PaymentSchedule other) {
    return new com.demo.cloudevents.avro.PaymentSchedule.Builder(other);
  }

  /**
   * RecordBuilder for PaymentSchedule instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentSchedule>
    implements org.apache.avro.data.RecordBuilder<PaymentSchedule> {

    private java.lang.CharSequence paymentScheduleType;
    private java.lang.CharSequence paymentFrequency;
    private com.demo.cloudevents.avro.Autopay autoPay;
    private com.demo.cloudevents.avro.Autopay.Builder autoPayBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.demo.cloudevents.avro.PaymentSchedule.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentScheduleType)) {
        this.paymentScheduleType = data().deepCopy(fields()[0].schema(), other.paymentScheduleType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentFrequency)) {
        this.paymentFrequency = data().deepCopy(fields()[1].schema(), other.paymentFrequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.autoPay)) {
        this.autoPay = data().deepCopy(fields()[2].schema(), other.autoPay);
        fieldSetFlags()[2] = true;
      }
      if (other.hasAutoPayBuilder()) {
        this.autoPayBuilder = com.demo.cloudevents.avro.Autopay.newBuilder(other.getAutoPayBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentSchedule instance
     * @param other The existing instance to copy.
     */
    private Builder(com.demo.cloudevents.avro.PaymentSchedule other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.paymentScheduleType)) {
        this.paymentScheduleType = data().deepCopy(fields()[0].schema(), other.paymentScheduleType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paymentFrequency)) {
        this.paymentFrequency = data().deepCopy(fields()[1].schema(), other.paymentFrequency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.autoPay)) {
        this.autoPay = data().deepCopy(fields()[2].schema(), other.autoPay);
        fieldSetFlags()[2] = true;
      }
      this.autoPayBuilder = null;
    }

    /**
      * Gets the value of the 'paymentScheduleType' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentScheduleType() {
      return paymentScheduleType;
    }

    /**
      * Sets the value of the 'paymentScheduleType' field.
      * @param value The value of 'paymentScheduleType'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder setPaymentScheduleType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.paymentScheduleType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentScheduleType' field has been set.
      * @return True if the 'paymentScheduleType' field has been set, false otherwise.
      */
    public boolean hasPaymentScheduleType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentScheduleType' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder clearPaymentScheduleType() {
      paymentScheduleType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentFrequency' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentFrequency() {
      return paymentFrequency;
    }

    /**
      * Sets the value of the 'paymentFrequency' field.
      * @param value The value of 'paymentFrequency'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder setPaymentFrequency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.paymentFrequency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentFrequency' field has been set.
      * @return True if the 'paymentFrequency' field has been set, false otherwise.
      */
    public boolean hasPaymentFrequency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'paymentFrequency' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder clearPaymentFrequency() {
      paymentFrequency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'autoPay' field.
      * @return The value.
      */
    public com.demo.cloudevents.avro.Autopay getAutoPay() {
      return autoPay;
    }

    /**
      * Sets the value of the 'autoPay' field.
      * @param value The value of 'autoPay'.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder setAutoPay(com.demo.cloudevents.avro.Autopay value) {
      validate(fields()[2], value);
      this.autoPayBuilder = null;
      this.autoPay = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'autoPay' field has been set.
      * @return True if the 'autoPay' field has been set, false otherwise.
      */
    public boolean hasAutoPay() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'autoPay' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.Autopay.Builder getAutoPayBuilder() {
      if (autoPayBuilder == null) {
        if (hasAutoPay()) {
          setAutoPayBuilder(com.demo.cloudevents.avro.Autopay.newBuilder(autoPay));
        } else {
          setAutoPayBuilder(com.demo.cloudevents.avro.Autopay.newBuilder());
        }
      }
      return autoPayBuilder;
    }

    /**
     * Sets the Builder instance for the 'autoPay' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder setAutoPayBuilder(com.demo.cloudevents.avro.Autopay.Builder value) {
      clearAutoPay();
      autoPayBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'autoPay' field has an active Builder instance
     * @return True if the 'autoPay' field has an active Builder instance
     */
    public boolean hasAutoPayBuilder() {
      return autoPayBuilder != null;
    }

    /**
      * Clears the value of the 'autoPay' field.
      * @return This builder.
      */
    public com.demo.cloudevents.avro.PaymentSchedule.Builder clearAutoPay() {
      autoPay = null;
      autoPayBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentSchedule build() {
      try {
        PaymentSchedule record = new PaymentSchedule();
        record.paymentScheduleType = fieldSetFlags()[0] ? this.paymentScheduleType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.paymentFrequency = fieldSetFlags()[1] ? this.paymentFrequency : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (autoPayBuilder != null) {
          record.autoPay = this.autoPayBuilder.build();
        } else {
          record.autoPay = fieldSetFlags()[2] ? this.autoPay : (com.demo.cloudevents.avro.Autopay) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentSchedule>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentSchedule>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentSchedule>
    READER$ = (org.apache.avro.io.DatumReader<PaymentSchedule>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
